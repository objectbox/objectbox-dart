stages:
  - code-analysis
  - test
  - test-coverage

variables:
  # Test latest available and lowest supported SDK (see dev-doc/updating-dart-flutter-and-dependencies.md).
  # # Pick a concrete version instead of "latest" to avoid builds breaking due to changes in new
  # SDKs. For available versions see https://hub.docker.com/_/dart?tab=tags
  DART_VERSION_LATEST: '3.7.2'
  DART_VERSION_LOWEST: '2.18.6' # Use latest bugfix release to get tooling fixes
  DART_VERSION: $DART_VERSION_LATEST # Also used for caching, see .cache template

.common:
  image: dart:$DART_VERSION # Official Dart Docker image https://hub.docker.com/_/dart
  tags: [ x64, linux, docker ] # Jobs use shell commands and scripts, so only run on Linux

# Make PUB_CACHE cacheable in GitLab;
# see also https://gitlab.com/gitlab-org/gitlab/-/merge_requests/77791/diffs and
# https://dikman.medium.com/optimising-flutter-ci-by-caching-packages-8a1d537e0b23
# Requires extending job to set DART_VERSION variable.
.cache:
  extends: .common
  before_script:
    - export PUB_CACHE="$CI_PROJECT_DIR/.pub-cache" # https://dart.dev/tools/pub/environment-variables
    - export PATH="$PATH":"$PUB_CACHE/bin"
  cache:
    paths:
      - $CI_PROJECT_DIR/.pub-cache/bin/
      - $CI_PROJECT_DIR/.pub-cache/global_packages/
      - $CI_PROJECT_DIR/.pub-cache/hosted/
    key: "linux-x64-dart-$DART_VERSION-pub-cache"

# Analyze (only) Dart packages, check formatting in Dart and Flutter packages.
analyze-and-format:
  extends: .cache
  stage: code-analysis
  script:
    # Get dependencies
    - dart pub get --directory=benchmark
    - dart pub get --directory=generator
    - dart pub get --directory=objectbox
    - dart pub get --directory=objectbox_test
    - dart pub get --directory=objectbox/example/dart-native/vectorsearch_cities
    # Generate code
    - cd benchmark
    - dart run build_runner build
    - cd ../objectbox_test
    - dart run build_runner build
    - cd ../objectbox/example/dart-native/vectorsearch_cities
    - dart run build_runner build
    - cd ../../../.. # back to repo root
    # Analyze Dart packages
    - dart analyze benchmark
    - dart analyze generator
    - dart analyze objectbox
    - dart analyze objectbox_test
    - dart analyze objectbox/example/dart-native/vectorsearch_cities
    # Since Dart 3.7, dart format needs pub get to run before formatting,
    # so can no longer check formatting of Flutter packages (would require Flutter SDK):
    # Check formatting only for Dart packages
    - dart format --set-exit-if-changed benchmark
    - dart format --set-exit-if-changed generator
    - dart format --set-exit-if-changed objectbox
    - dart format --set-exit-if-changed objectbox_test
    - dart format --set-exit-if-changed objectbox/example/dart-native

# Runs generator integration tests, e.g. ensures generator works as expected.
# Note: no need to test oldest SDK here, generator package is also built as part of unit-tests job.
generator-integ-tests:
  extends: .cache
  stage: test
  script:
    - ./install.sh --install # Install globally for generator integration tests
    - ./generator/test.sh

# Runs generator and objectbox unit tests.
.unit-tests-template:
  extends: .cache
  stage: test
  needs: ["generator-integ-tests"] # Wait for generator integration tests
  script:
    # Generator tests
    - cd generator
    - dart pub get
    - dart test
    # ObjectBox tests
    - cd ../objectbox_test
    - ../install.sh
    - dart pub get
    - dart run build_runner build
    # Set concurrency=1 to run only one test suite (== test file) at a time.
    # Set --reporter expanded to print log for every completed test.
    # Together, this will produce sequential log output, making it easier to attribute native logs.
    - dart test --concurrency=1 --reporter expanded
    # Run again using in-memory database
    - export OBX_IN_MEMORY=true
    - dart test --concurrency=1 --reporter expanded

unit-tests:
  extends: .unit-tests-template
  parallel:
    matrix:
      - DART_VERSION: [ $DART_VERSION_LOWEST, $DART_VERSION_LATEST ]

# For the Dart Native example compiles and runs the executable (analysis and code formatting is
# checked by analyze job).
vectorsearch-example:
  extends: .cache
  stage: test
  needs: ["generator-integ-tests"] # Wait for generator integration tests
  script:
    - cd objectbox/example/dart-native/vectorsearch_cities
    - dart pub get
    - dart run build_runner build
    - ../../../../install.sh
    - dart compile exe bin/vectorsearch_cities.dart
    - ./bin/vectorsearch_cities.exe

# Runs tests with coverage on the objectbox package.
# Note: As this requires to run tests, make sure this does not block the actual test jobs so test
# issues can be seen.
test-coverage:
  extends: .cache
  stage: test-coverage
  needs: ["unit-tests"] # Get test results first
  script:
    # Install coverage tools
    - apt-get update
    - apt-get install --yes --no-install-recommends lcov
    - dart pub global activate coverage
    # Prepare objectbox_test
    - cd objectbox_test
    - dart pub get
    - dart run build_runner build
    # Generate test coverage
    - cd ../objectbox
    - ../install.sh
    - dart pub get
    - ./tool/coverage.sh
  coverage: /^\s*lines......:\s*\d+.\d+\%/
  artifacts:
    paths:
      - objectbox/coverage/html/
